#!/usr/bin/env python3
"""
Script de configuration automatique pour le Bot Telegram de T√©l√©chargement de Vid√©os
"""

import os
import sys
import subprocess
import shutil

def print_banner():
    """Affiche la banni√®re du script"""
    print("üé¨ Bot Telegram de T√©l√©chargement de Vid√©os")
    print("=" * 50)
    print("Script de configuration automatique")
    print()

def check_python_version():
    """V√©rifie la version de Python"""
    print("üîç V√©rification de la version Python...")
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 ou sup√©rieur est requis")
        print(f"   Version actuelle: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")
    return True

def create_virtual_environment():
    """Cr√©e un environnement virtuel"""
    print("\nüêç Cr√©ation de l'environnement virtuel...")
    
    if os.path.exists(".venv"):
        print("‚úÖ Environnement virtuel d√©j√† existant")
        return True
    
    try:
        subprocess.run([sys.executable, "-m", "venv", ".venv"], check=True)
        print("‚úÖ Environnement virtuel cr√©√©")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de la cr√©ation de l'environnement virtuel")
        return False

def get_pip_command():
    """Retourne la commande pip appropri√©e"""
    if os.name == 'nt':  # Windows
        return os.path.join(".venv", "Scripts", "pip.exe")
    else:  # Linux/Mac
        return os.path.join(".venv", "bin", "pip")

def install_dependencies():
    """Installe les d√©pendances"""
    print("\nüì¶ Installation des d√©pendances...")
    
    pip_cmd = get_pip_command()
    
    if not os.path.exists(pip_cmd):
        print("‚ùå pip non trouv√© dans l'environnement virtuel")
        return False
    
    try:
        subprocess.run([pip_cmd, "install", "-r", "requirements.txt"], check=True)
        print("‚úÖ D√©pendances install√©es")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå Erreur lors de l'installation des d√©pendances")
        return False

def create_env_file():
    """Cr√©e le fichier .env"""
    print("\n‚öôÔ∏è Configuration du fichier .env...")
    
    if os.path.exists(".env"):
        print("‚úÖ Fichier .env d√©j√† existant")
        return True
    
    try:
        # Copier le fichier d'exemple
        if os.path.exists("env_example.txt"):
            shutil.copy("env_example.txt", ".env")
            print("‚úÖ Fichier .env cr√©√© √† partir de env_example.txt")
        else:
            # Cr√©er un fichier .env basique
            with open(".env", "w") as f:
                f.write("# Configuration du Bot Telegram\n")
                f.write("BOT_TOKEN=YOUR_BOT_TOKEN\n")
            print("‚úÖ Fichier .env cr√©√©")
        
        print("\nüìù IMPORTANT: Vous devez maintenant √©diter le fichier .env")
        print("   et remplacer YOUR_BOT_TOKEN par votre v√©ritable token de bot")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du fichier .env: {e}")
        return False

def create_downloads_directory():
    """Cr√©e le dossier de t√©l√©chargement"""
    print("\nüìÅ Cr√©ation du dossier de t√©l√©chargement...")
    
    try:
        os.makedirs("downloads", exist_ok=True)
        print("‚úÖ Dossier downloads cr√©√©")
        return True
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation du dossier downloads: {e}")
        return False

def show_next_steps():
    """Affiche les prochaines √©tapes"""
    print("\n" + "=" * 50)
    print("üéâ Configuration termin√©e !")
    print("=" * 50)
    print("\nüìã Prochaines √©tapes:")
    print("1. üì± Cr√©ez un bot Telegram via @BotFather")
    print("2. üîë Obtenez votre token de bot")
    print("3. ‚úèÔ∏è √âditez le fichier .env et remplacez YOUR_BOT_TOKEN")
    print("4. üöÄ Lancez le bot avec: python main.py")
    print("\nüìñ Pour plus d'informations, consultez le README.md")
    print("\nüîó Liens utiles:")
    print("   ‚Ä¢ @BotFather: https://t.me/BotFather")
    print("   ‚Ä¢ Documentation: README.md")

def main():
    """Fonction principale"""
    print_banner()
    
    # V√©rifications et installations
    steps = [
        ("V√©rification Python", check_python_version),
        ("Cr√©ation environnement virtuel", create_virtual_environment),
        ("Installation d√©pendances", install_dependencies),
        ("Configuration .env", create_env_file),
        ("Cr√©ation dossier downloads", create_downloads_directory),
    ]
    
    for step_name, step_func in steps:
        if not step_func():
            print(f"\n‚ùå √âchec √† l'√©tape: {step_name}")
            print("üí° V√©rifiez les erreurs ci-dessus et r√©essayez")
            return False
    
    show_next_steps()
    return True

if __name__ == "__main__":
    try:
        success = main()
        if not success:
            sys.exit(1)
    except KeyboardInterrupt:
        print("\n\nüëã Configuration annul√©e par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1) 